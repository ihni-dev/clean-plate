trigger:
  branches:
    include:
    - master
    - develop
    - feature/*
    - release/*
    - hotfix/*
    - support/*
  paths:
    include:
    - src/*
    - tests/*
    - azure-pipelines.yml

pr:
  branches:
    include:
    - master
    - develop
    - release/*
  paths:
    include:
    - src/*
    - tests/*
    - azure-pipelines.yml

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: true
  containerRegistryServiceConnection: 'Docker Hub'
  fullDockerRepositoryPath: 'ihni/clean-plate'
  azureSubscriptionServiceConnection: 'Azure Subscription'
  dockerNamespace: 'ihni'
  dockerRepository: 'clean-plate'
  appName: 'clean-plate'

stages:
- stage: Build
  jobs:
  - job: NET
    displayName: .NET
    steps:
      - task: UseDotNet@2
        displayName: Use .NET Core 3.0
        inputs:
          version: 3.0.x

      - task: DotNetCoreCLI@2
        displayName: Install ReportGenerator tool
        inputs:
          command: custom
          custom: tool
          arguments: install dotnet-reportgenerator-globaltool --tool-path .

      - task: DotNetCoreCLI@2
        displayName: Install GitVersion
        inputs:
          command: custom
          custom: tool
          arguments: install GitVersion.Tool --tool-path .

      - script: ./dotnet-gitversion /output buildserver /nofetch
        displayName: Set build version

      - script: |
            version=$(GitVersion.SemVer)
            echo "##vso[task.setvariable variable=version;isOutput=true]$version"
        name: outputVersion
        displayName: Save build version

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: --configuration $(buildConfiguration)
          versioningScheme: byEnvVar
          versionEnvVar: $(GitVersion.SemVer)

      - task: DotNetCoreCLI@2
        displayName: Run tests
        inputs:
          command: test
          projects: 'tests/**/*Tests/*.csproj'
          arguments: --configuration $(buildConfiguration) --logger "trx;LogFileName=$(GitVersion.SemVer)-TestResults.trx" --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
          nobuild: true
          publishTestResults: false
          majorVersion: $(GitVersion.Major)
          minorVersion: $(GitVersion.Minor)
          patchVersion: $(GitVersion.Patch)

      - script: |
          ./reportgenerator "-reports:tests/**/coverage.cobertura.xml" \
                            "-targetdir:tests/coverlet/reports" \
                            "-reporttypes:Cobertura;HtmlInline_AzurePipelines_Dark" \
                            "-tag:$(GitVersion.SemVer)" \
                            "-filefilters:-*GitVersionInformation*" \
                            "-assemblyfilters:-*Tests*"
        displayName: Create reports

      - task: PublishTestResults@2
        displayName: "Publish test results"
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: tests/**/*.trx
          failTaskOnFailedTests: true
          mergeTestResults: true

      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: tests/coverlet/reports/Cobertura.xml
          reportDirectory: tests/coverlet/reports

  - job: Docker
    displayName: Docker
    dependsOn: NET
    variables:
      version: $[dependencies.NET.outputs['outputVersion.Version']]
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
    steps:
      - task: Docker@2
        displayName: Build docker image
        inputs:
          command: build
          Dockerfile: '**/Dockerfile'
          containerRegistry: $(containerRegistryServiceConnection)
          repository: $(fullDockerRepositoryPath)
          tags: |
            $(version)
            latest

      - task: Docker@2
        displayName: Push docker image
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
        inputs: 
          command: push
          containerRegistry: $(containerRegistryServiceConnection)
          repository: $(fullDockerRepositoryPath)
          tags: |
            $(version)
            latest

- stage: Deploy
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  jobs:
    - deployment: deploy
      displayName: Azure App Service
      environment: clean-plate
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureRmWebAppDeployment@4
              displayName: Deploy to Azure App Service
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: $(azureSubscriptionServiceConnection)
                appType: webAppContainer
                WebAppName: $(appName)
                DockerNamespace: $(dockerNamespace)
                DockerRepository: $(dockerRepository)