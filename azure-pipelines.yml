trigger:
  branches:
    include:
    - master
    - develop
    - feature/*
    - release/*
    - hotfix/*
    - support/*
  paths:
    include:
    - src/*

variables:
  azureSubscriptionServiceConnection: 'Azure Subscription'
  containerRegistryServiceConnection: 'Docker Hub'
  dockerNamespace: 'ihni'
  dockerRepository: 'clean-plate'
  fullDockerRepositoryPath: ihni/clean-plate
  appName: 'clean-plate'
  buildConfiguration: 'Release'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  - job: NET
    displayName: '.NET'
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.0'
        inputs:
          version: '3.0.x'

      - task: DotNetCoreCLI@2
        displayName: 'Install GitVersion'
        inputs:
          command: custom
          custom: tool
          arguments: 'install GitVersion.Tool --tool-path .'

      - script: ./dotnet-gitversion /output buildserver /nofetch
        displayName: 'Set build version'

      - bash: |
            version=$(GitVersion.SemVer)
            echo "##vso[task.setvariable variable=version;isOutput=true]$version"
        name: outputVersion
        displayName: 'Save build version'

      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: restore
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Test'
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: --no-build --no-restore --configuration $(buildConfiguration)  --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/Coverage/

      - script: dotnet reportgenerator "-reports:$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml" "-targetDir:$(Build.SourcesDirectory)/TestResults/Coverage/Reports" -tag:$(Build.BuildNumber) -reportTypes:htmlInline
        displayName: 'Generate tests report'
        workingDirectory: $(Build.SourcesDirectory)/BuildApp.Web.Tests

      - task: PublishTestResults@2
        displayName: 'Publish tests results'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          failTaskOnFailedTests: true

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage results'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/**/coverage.cobertura.xml
          reportDirectory: $(Build.SourcesDirectory)/TestResults/Coverage/Reports
          failIfCoverageEmpty: false 

  - job: Docker
    displayName: 'Docker'
    variables:
      version: $[dependencies.NET.outputs['outputVersion.Version']]
    dependsOn: NET
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
    steps:
      - task: Docker@2
        displayName: 'Build docker image'
        inputs:
          command: build
          Dockerfile: '**/Dockerfile'
          containerRegistry: $(containerRegistryServiceConnection)
          repository: $(fullDockerRepositoryPath)
          tags: |
            $(version)
            latest

      - task: Docker@2
        displayName: 'Push docker image'
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
        inputs: 
          command: push
          containerRegistry: $(containerRegistryServiceConnection)
          repository: $(fullDockerRepositoryPath)
          tags: |
            $(version)
            latest

- stage: Deploy
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  jobs:
    - deployment: deploy
      displayName: 'Azure App Service'
      environment: 'clean-plate'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy to Azure App Service'
              inputs:
                azureSubscription: '$(azureSubscriptionServiceConnection)'
                appType: webAppContainer
                WebAppName: '$(appName)'
                DockerNamespace: '$(dockerNamespace)'
                DockerRepository: '$(dockerRepository)'